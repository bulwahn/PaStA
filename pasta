#!/usr/bin/env python3

"""
PaStA - Patch Stack Analysis
A tool for tracking the evolution of patch stacks

Copyright (c) OTH Regensburg, 2016

Author:
  Ralf Ramsauer <ralf.ramsauer@othr.de>

This work is licensed under the terms of the GNU GPL, version 2.  See
the COPYING file in the top-level directory.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.
"""
import sys

from PaStA import Config

from bin.pasta_analyse import analyse
from bin.pasta_cache import cache
from bin.pasta_compare import compare
from bin.pasta_compare_eqclasses import compare_eqclasses
from bin.pasta_rate import rate
from bin.pasta_statistics import statistics
from bin.pasta_compare_stacks import compare_stacks
from bin.pasta_patch_descriptions import patch_descriptions
from bin.pasta_upstream_history import pasta_upstream_history


__author__ = 'Ralf Ramsauer'
__copyright__ = 'Copyright (c) OTH Regensburg, 2016'
__credits__ = ['Ralf Ramsauer']
__license__ = 'GPLv2'
__version__ = '0.2'
__maintainer__ = 'Ralf Ramsauer'
__email__ = 'ralf.ramsauer@othr.de'
__status__ = 'Development'


def usage(me):
    print('PaStA - The Patch Stack Analysis (PaStA %s)\n'
          '\n'
          'usage: %s [-c config] sub -h\n'
          'where sub is one of:\n'
          '  analyse\n'
          '  cache\n'
          '  compare\n'
          '  rate\n'
          '  statistics\n'
          '  compare_stacks\n'
          '  compare_eqclasses\n'
          '  patch_descriptions\n'
          '  upstream_history\n'
          '\n'
          'If -c is not provided, PaStA will choose ./config as config file\n'
          '\n'
          '%s\n'
          'License %s: See COPYING\n'
          'This is free software: you are free to change and redistribute it.\n'
          'There is NO WARRANTY, to the extent permitted by law.\n'
          '\n'
          'Written by %s.' %
          (__version__, me, __copyright__, __license__, __author__))
    quit()


def main(argv):
    me = argv.pop(0)
    if not argv:
        usage(me)

    config = './config'
    # check if -c is provided
    if argv[0] == '-c':
        if len(argv) < 2:
            usage(me)
        argv.pop(0)
        config = argv.pop(0)
    config = Config(config)
    print('Project: %s' % config.project_name)

    if len(argv) < 1:
        usage(me)

    sub = argv.pop(0)

    if sub == '-h':
        usage(me)
    elif sub == 'analyse':
        analyse(config, sub, argv)
    elif sub == 'cache':
        cache(config, sub, argv)
    elif sub == 'compare':
        compare(config, sub, argv)
    elif sub == 'compare_eqclasses':
        compare_eqclasses(config, sub, argv)
    elif sub == 'rate':
        rate(config, sub, argv)
    elif sub == 'statistics':
        statistics(config, sub, argv)
    elif sub == 'compare_stacks':
        compare_stacks(config, sub, argv)
    elif sub == 'patch_descriptions':
        patch_descriptions(config, sub, argv)
    elif sub == 'upstream_history':
        pasta_upstream_history(config, sub, argv)
    else:
        print('Unknown command: %s' % sub)
        usage(me)

if __name__ == '__main__':
    main(sys.argv)
